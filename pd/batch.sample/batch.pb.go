// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.17.3
// source: src/batch.proto

package batch_sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	InputJson   string `protobuf:"bytes,2,opt,name=inputJson,proto3" json:"inputJson,omitempty"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_src_batch_proto_rawDescGZIP(), []int{0}
}

func (x *BatchRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BatchRequest) GetInputJson() string {
	if x != nil {
		return x.InputJson
	}
	return ""
}

type BatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *BatchReply) Reset() {
	*x = BatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReply) ProtoMessage() {}

func (x *BatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReply.ProtoReflect.Descriptor instead.
func (*BatchReply) Descriptor() ([]byte, []int) {
	return file_src_batch_proto_rawDescGZIP(), []int{1}
}

func (x *BatchReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BatchReply) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

var File_src_batch_proto protoreflect.FileDescriptor

var file_src_batch_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x72, 0x63, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4e, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x32, 0x46, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x13,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x28, 0x0a, 0x16, 0x69, 0x6f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x01, 0x5a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_batch_proto_rawDescOnce sync.Once
	file_src_batch_proto_rawDescData = file_src_batch_proto_rawDesc
)

func file_src_batch_proto_rawDescGZIP() []byte {
	file_src_batch_proto_rawDescOnce.Do(func() {
		file_src_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_batch_proto_rawDescData)
	})
	return file_src_batch_proto_rawDescData
}

var file_src_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_src_batch_proto_goTypes = []interface{}{
	(*BatchRequest)(nil), // 0: batch.BatchRequest
	(*BatchReply)(nil),   // 1: batch.BatchReply
}
var file_src_batch_proto_depIdxs = []int32{
	0, // 0: batch.BatchExecutor.Execute:input_type -> batch.BatchRequest
	1, // 1: batch.BatchExecutor.Execute:output_type -> batch.BatchReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_src_batch_proto_init() }
func file_src_batch_proto_init() {
	if File_src_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_batch_proto_goTypes,
		DependencyIndexes: file_src_batch_proto_depIdxs,
		MessageInfos:      file_src_batch_proto_msgTypes,
	}.Build()
	File_src_batch_proto = out.File
	file_src_batch_proto_rawDesc = nil
	file_src_batch_proto_goTypes = nil
	file_src_batch_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BatchExecutorClient is the client API for BatchExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BatchExecutorClient interface {
	Execute(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (BatchExecutor_ExecuteClient, error)
}

type batchExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchExecutorClient(cc grpc.ClientConnInterface) BatchExecutorClient {
	return &batchExecutorClient{cc}
}

func (c *batchExecutorClient) Execute(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (BatchExecutor_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BatchExecutor_serviceDesc.Streams[0], "/batch.BatchExecutor/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &batchExecutorExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BatchExecutor_ExecuteClient interface {
	Recv() (*BatchReply, error)
	grpc.ClientStream
}

type batchExecutorExecuteClient struct {
	grpc.ClientStream
}

func (x *batchExecutorExecuteClient) Recv() (*BatchReply, error) {
	m := new(BatchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchExecutorServer is the server API for BatchExecutor service.
type BatchExecutorServer interface {
	Execute(*BatchRequest, BatchExecutor_ExecuteServer) error
}

// UnimplementedBatchExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedBatchExecutorServer struct {
}

func (*UnimplementedBatchExecutorServer) Execute(*BatchRequest, BatchExecutor_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterBatchExecutorServer(s *grpc.Server, srv BatchExecutorServer) {
	s.RegisterService(&_BatchExecutor_serviceDesc, srv)
}

func _BatchExecutor_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BatchExecutorServer).Execute(m, &batchExecutorExecuteServer{stream})
}

type BatchExecutor_ExecuteServer interface {
	Send(*BatchReply) error
	grpc.ServerStream
}

type batchExecutorExecuteServer struct {
	grpc.ServerStream
}

func (x *batchExecutorExecuteServer) Send(m *BatchReply) error {
	return x.ServerStream.SendMsg(m)
}

var _BatchExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "batch.BatchExecutor",
	HandlerType: (*BatchExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _BatchExecutor_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/batch.proto",
}
